--Created by baohmab OYC 20181103
--[[
  timer = require("timer")
  local co1 = timer:start(
    this:downloadImag() --CS function
  );
  local iswait = true;
  local co2 = timer:start(
    function(param)
      timer:start(
        function()
          timer:yield(3);
          iswait=false;
        end
      );
      print(param.testparam);
      timer:yield(); --wait for a frame
      timer:yield(1); --wait for a second
      timer:yield(timer:start(
        function()
          timer:yield(function() return iswait==false; end) --wait until
          print("wait XXX");
        end
      ));
    end,
    {testparam="OKOK"}
  );
  timer:stop(co1);
  timer:stop(co2);
]]
local timer = {
	scale = 0,
	real = 0,
    start = function(self,co,...)		
	    --return cs_coroutine_runner:StartCoroutine(util.cs_generator(co,...))
		if type(co)=="function" then
			return main:StartCoroutine(util.cs_generator(co,...))
		else
			return main:StartCoroutine(co)
		end
	end,
	stop = function(self,coroutine)
		if coroutine~=nil then 
			--cs_coroutine_runner:StopCoroutine(coroutine)
			main:StopCoroutine(coroutine)
		end
	end,
	yield = function(self,condition,realtime_until)
		if condition==nil then 
			coroutine.yield(CS.UnityEngine.WaitForEndOfFrame());
		else
			if type(condition)=="function" then
				if realtime_until==true then
					coroutine.yield(CS.UnityEngine.WaitUntil(condition));
				else
					coroutine.yield(CS.UnityEngine.WaitWhile(condition));
				end
			elseif type(condition)=="number" then
				if realtime_until==true then
					coroutine.yield(CS.UnityEngine.WaitForSecondsRealtime(condition));
				else
					coroutine.yield(CS.UnityEngine.WaitForSeconds(condition));
				end
			else
				coroutine.yield(condition);
			end
		end
	end,
	stamp = function (self)
		local rv = {
			st = self.scale,
			rt = self.real,
			timer = self,
			past =function (self,real)
				if real==true then
					return self.timer.real-self.rt;
				else
					return self.timer.scale-self.st;
				end
			end
		}
		return rv;
	end,
}

return timer
