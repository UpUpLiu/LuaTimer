--[[
	created by baohmab oyc.
	7/11/2018
--]]

local timer = {
	debugFlag = true,
	time = {
		scale = 0,
		real = 0,
	},
	off = function(self)
			self.enable = false
			return self
		end,
	on = function(self)
			self.enable = true
			return self
		end,
	signals = {},
	runningProcesses ={},
	newProcesses ={},
	enable = true,
	checkid = function(t,id)
		if t.checkobjs==nil then return false end
		for _,o in ipairs(t.checkobjs) do
			if o.id == id then return true end
		end
		return false
	end,
	addcheck = function(t,waitobj)
		if waitobj==nil or waitobj.id == nil or waitobj.id=='' then return nil end
		t.checkobjs = t.checkobjs or {}		
		table.insert(t.checkobjs,#t.checkobjs+1,waitobj)
	end,
	resetcheck = function(t)
		t.checkobjs = nil
	end
}
timer.waitFrame ={
	name = 'waitFrame',
	timer = timer,
	waitframe = function(self)
		self.timer:debutPrint (self.waitFrame)
		coroutine.yield()
	end
}
setmetatable(timer.waitFrame,{__call=function(self)	self:waitframe() end})
timer.wait = {
	name = 'wait',
	timer = timer,
	setid = function(self,id)
		self.id = id
		return self
	end,
	isWait = function(self)
		if self.condition==nil or type(self.condition) ~='function' then return false end
		return self:condition()
	end,
	on = function(self) 
		self.timer.enable=true;
		self.timer:debutPrint (self)		
		coroutine.yield(self)
	end,
	new= function(self,pcondition)
		if type(pcondition) ~= 'function' then return nil end
		local newWait = setmetatable({ ['condition'] = pcondition},{__index = self})
		if self.timer.enable then
			self.timer:debutPrint (newwait)
			coroutine.yield(newWait)
		else
			return newWait
		end
		--return newWait;
	end,
	getName= function(self)
		return self.name
	end
}
setmetatable(timer.wait,{__call=function(self,pcondition)
	return self:new(pcondition)
end})

timer.waitSecond = {
	name = 'waitSecond',
	timer = timer,
	new = function(self,delayTime,isRealtime)
		local newwait = {['delayTime'] =delayTime,['isRealtime']=isRealtime,
			['condition'] = function(s) 
				if s.isRealtime then do
					return s.targetTime>s.timer.time.real
				end else do 
					return s.targetTime>s.timer.time.scale
				end end --if
			end
		}
		if isRealtime then do
			newwait.targetTime = self.timer.time.real+delayTime
		end else do 
			newwait.targetTime = self.timer.time.scale+delayTime
		end end --if
		newwait = setmetatable(newwait,{__index = self})
		if self.timer.enable then
			self.timer:debutPrint (newwait)
			coroutine.yield(newwait)
		else
			return newwait
		end
		--return setmetatable(newwait,{__index = self})
	end --function
}
setmetatable(timer.waitSecond,{__index=timer.wait,__call =function(t,time,isRealtime)
		 return t:new(time,isRealtime)
	end
})
timer.waitOR = {
	name = 'waitOR',
	timer = timer,
	new = function(self,...)		
		local newwait = { targets = {...},
		['condition'] = function(s) 
			if s.targets ==nil or #s.targets==0 then return false; end
			for _, v in ipairs(s.targets) do
				if v:isWait()==false then s.timer:addcheck(v); return false; end
			end
			return true;
		end}
		newwait = setmetatable(newwait,{__index = self})
		return newwait
		--return setmetatable(newwait,{__index = self})
	end --function
}
setmetatable(timer.waitOR,{__index=timer.wait,__call =function(t,...)
		 return t:new(...)
	end
})
timer.waitAND = {
	name = 'waitAND',
	timer = timer,
	new = function(self,...)
		local newwait = { targets ={...},
		['condition'] = function(s) 
			if s.targets ==nil or #s.targets==0 then return false end
			for _, v in ipairs(s.targets) do
				if v:isWait() then return true end
			end
			return false;
		end}
		newwait = setmetatable(newwait,{__index = self})
		return newwait
		--return setmetatable(newwait,{__index = self})
	end --function
}
setmetatable(timer.waitAND,{__index=timer.wait,__call =function(t,...)
		 return t:new(...)
	end
})

timer.waitCoroutine = {
	name = 'waitCoroutine',
	timer = timer,
	new = function(self,co,...)
		co = self.timer.run(co,...).co
		local newwait = {	
			['condition'] = function(s) 
				return s.timer.runningProcesses[co]~=nil or s.timer.newProcesses[co]~=nil
			end
		}
		newwait = setmetatable(newwait,{__index = self})
		if self.timer.enable then
			self.timer:debutPrint (newwait)
			coroutine.yield(newwait)
		end
		return newwait
		--return setmetatable(newwait,{__index = self})
	end,
}
setmetatable(timer.waitCoroutine,{
	__index=timer.wait,
	__call = function(t,co,...)
		return t:new(co,...)
	end,
})

timer.waitSignal={
	name = 'waitSignal',
	timer = timer,
	new = function(self,sign)
		local newwait = {
			id=sign,
			['condition'] = function(s) 
				return s.signal
			end,
			signal = true
		}
		if self.timer.signals[sign] then
			table.insert( self.timer.signals[sign], newwait )
		else
			self.timer.signals[sign] = { newwait }
		end
		newwait = setmetatable(newwait,{__index = self})
		if self.timer.enable then
			self.timer:debutPrint (newwait)
			coroutine.yield( newwait)
		else
			return newwait
		end
		--return setmetatable(newwait,{__index = self})
	end
}
setmetatable(timer.waitSignal,{
	__index=timer.wait,
	__call = function(t,sign)
		return t:new(sign)
	end,
})
timer.signal = {
	name = 'signal',
	timer = timer,
	sendSignal = function(self,sign)
		if self.timer.signals[sign] == nil then 
			self.timer:debutPrint (timer.signal,sign..'(empty?)')
			return nil 
		end
		local count = 0
		for i, waitobj in ipairs( self.timer.signals[sign] ) do
			if waitobj.signal ~=nil then 
				count=count+1;
				waitobj.signal = false 
			end
		end
		self.timer.signals[sign] = nil		
		self.timer:debutPrint (timer.signal,sign..'('..count..')')
	end,
}
setmetatable(timer.signal,{
	__call = function(t,sign)
		return t:sendSignal(sign)
	end,
})

timer.run ={
	name = 'coroutine',
	timer = timer,
	run = function(self,co,...)
		if type(co)=='function' then 
			setfenv( co,
				setmetatable( {
					wait = self.timer.wait,
					waitSecond =self.timer.waitSecond ,
					waitCoroutine =self.timer.waitCoroutine ,
					waitSignal =self.timer.waitSignal ,
					waitFrame =self.timer.waitFrame ,
					signal =self.timer.signal ,
					run =self.timer.run,
				}, {
					__index = getfenv( 0 ),
				} )
			 )
			co = coroutine.create (co) 
		end
		if type(co)=='thread' then
			if coroutine.status(co) ~= 'dead' then
				self.timer.newProcesses[co] = {
					['retv']={},
					['param']={...},
					['co'] = co,
				}
				setmetatable(self.timer.newProcesses[co] ,{__index = self.timer.run})
				if (self.timer.debug==true) then 
					--self.timer.newProcesses[co]:debugPrint();
				end
				return self.timer.newProcesses[co]
			end
		end 
		return nil
	end
}
setmetatable(timer.run,{
	__call = function(self,co,...)
		return self:run(co,...)
	end,
})


timer.update = {
	name = 'update',
	timer = timer,
	update = function(self,rt,st)
		self.timer.time.scale = st
		self.timer.time.real = rt
		self.timer.runningProcesses = {}
		for co,data in pairs(self.timer.newProcesses) do
			self.timer.runningProcesses[co] = data
		end
		self.timer.newProcesses = {}
		self.timer:resetcheck();
		for co,data in pairs(self.timer.runningProcesses) do
			local iswait = false
			if(data.retv~=nil and type(data.retv.isWait)=='function') then
				iswait = data.retv:isWait();
				self.timer:addcheck(data.retv)
			end
			if iswait==false then 
				self.timer.currentThread = co
				local errorfree, value = '',''
				if(data.param==nil ) then					
					errorfree, value=coroutine.resume(co)
				else
					errorfree, value=coroutine.resume(co,table.unpack(data.param))
				end
				if errorfree==false then print('[Error] '..tostring(value)) end
				data.retv = value
				
				if coroutine.status(co) ~= 'dead' then
					self.timer.newProcesses[co] = data
				else
					self.timer:debutPrint (timer.update,'Stop Coroutine')
				end
			else
					self.timer.newProcesses[co] = data
			end
		end
		--print(table.count(self.timer.newProcesses))
	end
}
setmetatable(timer.update,{
	__call = function(self,rt,st)
		return self:update(rt,st)
	end,
})

function timer.coData (self,co)
	return self.newProcesses[co] or self.runningProcesses[co]
end

function timer.curCoData (self)
	return self:coData(self.currentThread)
end

function timer.startDebug (self,debugName)
	local curCo = self:curCoData()
	if curCo then 
		curCo.debugName=debugName 
	else
		return nil
	end
	if self.debugFlag then else return nil end
	if curCo.debugName then else return nil end
	print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'Start Coroutine')
end

function timer.stopDebug (self)
	local curcodata = self:curCoData()
	if curcodata then curcodata.debugName=nil end
end

function timer.debutPrint (self,debugSource,data)
	if self.debugFlag==nil or self.debugFlag==false then return nil end
	local curCo = self:curCoData()
	if(curCo==nil) then
		if	debugSource.name=='signal'	then
			print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),'['..(debugSource.id or debugSource.name)..'] ( '..data..')')
		end
		--shall we print something for debug?
		return;
	end
	if curCo.debugName then else return end
	if		debugSource.name =='waitFrame' 	then 	
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'['..(debugSource.id or debugSource.name)..']')
	elseif	debugSource.name=='wait'			then
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'['..(debugSource.id or debugSource.name)..'] ('..debugSource.title..')')
	elseif	debugSource.name=='waitSecond'	then
		if debugSource.isRealtime==nil then 
			print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'['..(debugSource.id or debugSource.name)..'] ( delayTime='..debugSource.delayTime..')')
		else
			print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'['..(debugSource.id or debugSource.name)..'] ( delayTime='..debugSource.delayTime..',isRealtime='..debugSource.isRealtime..')')
		end
	elseif	debugSource.name=='waitCoroutine'	then
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'['..(debugSource.id or debugSource.name)..']')
	elseif	debugSource.name=='waitSignal'	then 
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'['..(debugSource.id or debugSource.name)..'] ( '..debugSource.sign..')')
	elseif	debugSource.name=='signal'		then
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,'['..(debugSource.id or debugSource.name)..'] ( '..data..')')
	elseif	debugSource.name==timer.update		then
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,data)
	elseif	debugSource.name=='waitOR'		then 
		local dstr = ''..(debugSource.id or debugSource.name)..'=>'
		for _,v in ipairs(debugSource.targets) do
			if dstr == '' then
				dstr = '['..(v.id or v.name)..']'
			else
				dstr = dstr ..' or ['..(v.id or v.name)..']'
			end
		end
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,dstr)
	elseif	debugSource.name=='waitAND'		then 	--self.timer:debutPrint (timer.update,co)
		local dstr = ''..(debugSource.id or debugSource.name)..'=>'
		for _,v in ipairs(debugSource.targets) do
			if dstr == '' then
				dstr = '['..(v.id or v.name)..']'
			else
				dstr = dstr ..' and ['..(v.id or v.name)..']'
			end
		end
		print('Timer Log',table.count(self.runningProcesses),table.count(self.newProcesses),curCo.debugName,dstr)
	end
end

table.count= function(tbl) 
  local count = 0
    for foo, bar in pairs(tbl) do
        count = count + 1
    end
    return count
end

table.toString= function(tbl) 
	if(tbl==nil) then return '' end
	local str = 'type=>'..type(tbl)..'\n'
	if type(tbl)~='table' then return str..tostring(tbl) end
    for foo, bar in pairs(tbl) do
		str = str..'['..foo..']='..tostring(bar)..'\n'
    end
    return str
end





return timer
